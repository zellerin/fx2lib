;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(in-package fx2)
(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("_wrap_cdata" cdata) :pointer
  (ptr :pointer)
  (nelements :int))

(cffi:defcfun ("_wrap_memmove" memmove) :void
  (data :pointer)
  (indata :pointer)
  (inlen :int))

(cffi:defcvar ("VID" VID)
 :int)

(cffi:defcvar ("PID" PID)
 :int)

(cffi:defcfun ("_wrap_new_fx2" new_fx2) :pointer)

(cffi:defcfun ("_wrap_delete_fx2" delete_fx2) :void
  (self :pointer))

(cffi:defcfun ("_wrap_fx2_open__SWIG_0" fx2_open_0) :void
  (self :pointer)
  (vid :int)
  (pid :int)
  (idx :int))

(cffi:defcfun ("_wrap_fx2_open__SWIG_1" fx2_open_1) :void
  (self :pointer)
  (vid :int)
  (pid :int))

(cffi:defcfun ("_wrap_fx2_open__SWIG_2" fx2_open_2) :void
  (self :pointer)
  (vid :int))

(cffi:defcfun ("_wrap_fx2_open__SWIG_3" fx2_open_3) :void
  (self :pointer))

(cffi:defcfun ("_wrap_fx2_set_interface" fx2_set_interface) :void
  (self :pointer)
  (interface :int)
  (alt_setting :int))

(cffi:defcfun ("_wrap_fx2_isopen" fx2_isopen) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_fx2_close" fx2_close) :void
  (self :pointer))

(cffi:defcfun ("_wrap_fx2_set_debug_level" fx2_set_debug_level) :void
  (self :pointer)
  (n :int))

(cffi:defcfun ("_wrap_fx2_do_usb_command__SWIG_0" fx2_do_usb_command_0) :int
  (self :pointer)
  (buf :string)
  (size :int)
  (type :unsigned-char)
  (request :unsigned-char)
  (value :unsigned-short)
  (index :unsigned-short)
  (length :unsigned-short)
  (timeout :int))

(cffi:defcfun ("_wrap_fx2_do_usb_command__SWIG_1" fx2_do_usb_command_1) :int
  (self :pointer)
  (buf :string)
  (size :int)
  (type :unsigned-char)
  (request :unsigned-char)
  (value :unsigned-short)
  (index :unsigned-short)
  (length :unsigned-short))

(cffi:defcfun ("_wrap_fx2_clear_halt" fx2_clear_halt) :int
  (self :pointer)
  (ep :char))

(cffi:defcfun ("_wrap_fx2_reset" fx2_reset) :int
  (self :pointer))

(cffi:defcfun ("_wrap_fx2_set_configuration" fx2_set_configuration) :int
  (self :pointer)
  (config :int))

(cffi:defcfun ("_wrap_fx2_ep_bulk" fx2_ep_bulk) :pointer
  (self :pointer)
  (buf :string)
  (size :int)
  (ep :unsigned-char)
  (timeout :int))
