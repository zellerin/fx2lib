/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCFFI
#define SWIGCFFI
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>


typedef struct SWIGCDATA {
    char *data;
    int   len;
} SWIGCDATA;



static SWIGCDATA cdata_void(void *ptr, int nelements) {



   SWIGCDATA d;
   d.data = (char *) ptr;



   d.len  = nelements;

   return d;
}

EXPORT SWIGCDATA *_wrap_cdata (void *larg1, int larg2) {
  SWIGCDATA * lresult = (SWIGCDATA *)0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  SWIGCDATA result;

  arg2 = 1;
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = cdata_void(arg1,arg2);
    lresult = new SWIGCDATA(result);
    return lresult;
  } catch (...) {
    return (SWIGCDATA *)0;
  }
}


EXPORT void _wrap_memmove (void *larg1, void *larg2, int larg3) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    memmove(arg1,(void const *)arg2,arg3);

  } catch (...) {

  }
}



#include "fx2.h"

EXPORT fx2 *_wrap_new_fx2 () {
  fx2 * lresult = (fx2 *)0 ;
  fx2 *result = 0 ;

  try {
    result = (fx2 *)new fx2();
    lresult = result;
    return lresult;
  } catch (...) {
    return (fx2 *)0;
  }
}


EXPORT void _wrap_delete_fx2 (fx2 *larg1) {
  fx2 *arg1 = (fx2 *) 0 ;

  arg1 = larg1;
  try {
    delete arg1;

  } catch (...) {

  }
}


EXPORT void _wrap_fx2_open (fx2 *larg1, int larg2, int larg3, int larg4) {
  fx2 *arg1 = (fx2 *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->open(arg2,arg3,arg4);

  } catch (...) {

  }
}


EXPORT void _wrap_fx2_set_interface (fx2 *larg1, int larg2, int larg3) {
  fx2 *arg1 = (fx2 *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->set_interface(arg2,arg3);

  } catch (...) {

  }
}


EXPORT int _wrap_fx2_isopen (fx2 *larg1) {
  int lresult = (int)0 ;
  fx2 *arg1 = (fx2 *) 0 ;
  bool result;

  arg1 = larg1;
  try {
    result = (bool)(arg1)->isopen();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_fx2_close (fx2 *larg1) {
  fx2 *arg1 = (fx2 *) 0 ;

  arg1 = larg1;
  try {
    (arg1)->close();

  } catch (...) {

  }
}


EXPORT void _wrap_fx2_set_debug_level (fx2 *larg1, int larg2) {
  fx2 *arg1 = (fx2 *) 0 ;
  int arg2 ;

  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_debug_level(arg2);

  } catch (...) {

  }
}


EXPORT int _wrap_fx2_do_usb_command (fx2 *larg1, char *larg2, int larg3, unsigned char larg4, unsigned char larg5, unsigned short larg6, unsigned short larg7, unsigned short larg8, int larg9) {
  int lresult = (int)0 ;
  fx2 *arg1 = (fx2 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  unsigned short arg6 ;
  unsigned short arg7 ;
  unsigned short arg8 ;
  int arg9 ;
  int result;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (int)(arg1)->do_usb_command(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}

EXPORT int _wrap_fx2_clear_halt (fx2 *larg1, char larg2) {
  int lresult = (int)0 ;
  fx2 *arg1 = (fx2 *) 0 ;
  char arg2 ;
  int result;

  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->clear_halt(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_fx2_reset (fx2 *larg1) {
  int lresult = (int)0 ;
  fx2 *arg1 = (fx2 *) 0 ;
  int result;

  arg1 = larg1;
  try {
    result = (int)(arg1)->reset();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_fx2_set_configuration (fx2 *larg1, int larg2) {
  int lresult = (int)0 ;
  fx2 *arg1 = (fx2 *) 0 ;
  int arg2 ;
  int result;

  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)(arg1)->set_configuration(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_fx2_ep_bulk (fx2 *larg1, char *larg2, int larg3, unsigned char larg4, int larg5) {
  int lresult = (int)0 ;
  fx2 *arg1 = (fx2 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  unsigned char arg4 ;
  int arg5 ;
  bool result;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)(arg1)->ep_bulk(arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}
